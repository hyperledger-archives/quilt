# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
executorType: machine
machine: true

_run:
  jceinstall: &jceinstall
    name: "Download JCE unlimited strength policy to allow the 256 bit keys"
    command: |
      curl -L --cookie 'oraclelicense=accept-securebackup-cookie;'  http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip -o /tmp/jce_policy.zip
      unzip -o /tmp/jce_policy.zip -d /tmp
      sudo mv -f /tmp/UnlimitedJCEPolicyJDK8/US_export_policy.jar $JAVA_HOME/jre/lib/security/US_export_policy.jar
      sudo mv -f /tmp/UnlimitedJCEPolicyJDK8/local_policy.jar $JAVA_HOME/jre/lib/security/local_policy.jar

  javaversion: &javaversion
    name: "Report Java JDK Version being used"
    command: |
      echo ${JAVA_HOME}

  restorecache: &restorecache
    name: "Download and Cache Dependencies"
    keys:
      - v1-dependencies-{{ checksum "pom.xml" }}
      # fallback to using the latest cache if no exact match is found
      - v1-dependencies-

  installjava14: &installjava14
    name: "Download and install Java 14 from source OpenJDK"
    command: |
      JDK14_URL=https://download.java.net/java/GA/jdk14/076bab302c7b4508975440c56f6cc26a/36/GPL/openjdk-14_linux-x64_bin.tar.gz
      wget $JDK14_URL -O /tmp/openjdk14.tar.gz
      tar -xvzf /tmp/openjdk14.tar.gz
      sudo mv jdk-14/ /usr/lib/jvm/

  installjava15: &installjava15
    name: "Download and install Java 15 from source OpenJDK"
    command: |
      JDK15_URL=$(curl -s https://jdk.java.net/15/ | egrep -o "https://download.java.net/java/GA/jdk15.*?/.*?linux-x64.*?tar.gz" | head -1)
      wget $JDK15_URL -O /tmp/openjdk15.tar.gz
      tar -xvzf /tmp/openjdk15.tar.gz
      sudo mv jdk-15.0.1/ /usr/lib/jvm/
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
        environment:
          # Customize the JVM maximum heap limit
          MAVEN_OPTS: -Xmx4096m

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx4096m
      JAVA_HOME: /usr/lib/jvm/jdk1.8.0/

    steps:

      # apply the JCE unlimited strength policy to allow the PSK 256 bit key length
      # solution from http://qiita.com/yoskhdia/items/f4702a3abc4467de69b0
      - run: *jceinstall
      - run: *javaversion
      - checkout

      # Download and cache dependencies
      - restore_cache: *restorecache
      - run:
          name: Maven Install
          command:  mvn dependency:go-offline install

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}


      # save tests
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
            mkdir -p ~/checkstyle/
            find . -type f -regex ".*/target/checkstyle-reports/.*xml" -exec cp {} ~/junit/ \;

          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit


      # publish the coverage report to codecov.io
      - run: bash <(curl -s https://codecov.io/bash)

  build_android:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
        environment:
          # Customize the JVM maximum heap limit
          MAVEN_OPTS: -Xmx4096m

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
      JAVA_HOME: /usr/lib/jvm/jdk1.8.0/

    steps:

      # apply the JCE unlimited strength policy to allow the PSK 256 bit key length
      # solution from http://qiita.com/yoskhdia/items/f4702a3abc4467de69b0
      - run: *jceinstall
      - run: *javaversion
      - checkout

      # Download and cache dependencies
      - restore_cache: *restorecache

      - run:
          name: Maven Install
          command:  mvn dependency:go-offline install -Pandroid

  build_java9:
    machine:
      image: ubuntu-1604:201903-01

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
      JAVA_HOME: /usr/lib/jvm/java-9-openjdk-amd64/

    steps:
      - run:
          name: Upgrade JDK to JDK 9
          command: |
            sudo apt-get install openjdk-9-jdk-headless

      - run: *javaversion
      - checkout

      - restore_cache: *restorecache

      - run:
          name: Maven Install
          command: mvn dependency:go-offline install

  build_java10:
    machine:
      image: ubuntu-1604:201903-01

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
      JAVA_HOME: /usr/lib/jvm/java-10-openjdk-amd64/

    steps:
      - run:
          name: Upgrade JDK to JDK 10
          command: |
            sudo apt install openjdk-10-jdk-headless

      - run: *javaversion
      - checkout

      - restore_cache: *restorecache

      - run:
          name: Maven Install
          command: mvn dependency:go-offline install

  build_java11:
    machine:
      image: ubuntu-1604:201903-01

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
      JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64/

    steps:
      - run:
          # Need to do this because jdk-11 isn't found without updating the package lists.
          name: Update Package Lists from apt repositories
          command: |
            sudo apt-get update

      - run:
          name: Upgrade JDK to JDK 11
          command: |
            sudo apt install openjdk-11-jdk-headless

      - run: *javaversion
      - checkout

      - restore_cache: *restorecache

      - run:
          name: Maven Install
          command: mvn dependency:go-offline install

  build_java12:
    machine:
      image: ubuntu-1604:201903-01

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
      JAVA_HOME: /usr/lib/jvm/java-12-openjdk-amd64/

    steps:
      - run:
          # Need to do this because jdk-11 isn't found without updating the package lists.
          name: Update Package Lists from apt repositories
          command: |
            sudo apt-get update

      - run:
          name: Upgrade JDK to JDK 12
          command: |
            sudo apt install openjdk-12-jdk-headless

      - run: *javaversion
      - checkout

      - restore_cache: *restorecache

      - run:
          name: Maven Install
          command: mvn dependency:go-offline install

  build_java13:
    machine:
      image: ubuntu-1604:201903-01

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
      JAVA_HOME: /usr/lib/jvm/java-13-openjdk-amd64/

    steps:
      - run:
          # Need to do this because jdk-11 isn't found without updating the package lists.
          name: Update Package Lists from apt repositories
          command: |
            sudo apt-get update

      - run:
          name: Upgrade JDK to JDK 13
          command: |
            sudo apt install openjdk-13-jdk-headless

      - run: *javaversion
      - checkout

      - restore_cache: *restorecache

      - run:
          name: Maven Install
          command: mvn dependency:go-offline install

  build_java14:
    machine:
      image: ubuntu-1604:201903-01

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
      JAVA_HOME: /usr/lib/jvm/jdk-14/

    steps:
      - run:
          # Need to do this because jdk-11 isn't found without updating the package lists.
          name: Update Package Lists from apt repositories
          command: |
            sudo apt-get update

      - run: *installjava14
      - run: *javaversion
      - checkout

      - restore_cache: *restorecache

      - run:
          name: Maven Install
          command: mvn dependency:go-offline install

  build_java15:
    machine:
      image: ubuntu-1604:201903-01

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
      JAVA_HOME: /usr/lib/jvm/jdk-15.0.1/

    steps:
      - run:
          # Need to do this because jdk-11 isn't found without updating the package lists.
          name: Update Package Lists from apt repositories
          command: |
            sudo apt-get update

      - run: *installjava15
      - run: *javaversion
      - checkout

      - restore_cache: *restorecache

      - run:
          name: Maven Install
          command: mvn dependency:go-offline install

workflows:
  version: 2

  # In CircleCI v2.1, when no workflow is provided in config, an implicit one is used. However, if you declare a
  #  workflow to run a scheduled build, the implicit workflow is no longer run. You must add the job workflow to your
  # config in order for CircleCI to also build on every commit.
  commit:
    jobs:
      - build
      - build_android
      - build_java9
      - build_java10
      - build_java11
      - build_java12
      - build_java13
      - build_java14
#      - build_java15
